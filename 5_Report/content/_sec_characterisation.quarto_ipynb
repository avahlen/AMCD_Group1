{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Characterisation\n",
        "\n",
        "This chapter is about characterising the biquad filter with the help of computational software like python and and comparing that with ideal circuit simulations. The comparison between a mathematical approach and a basic circuit implementation, gives a first impression if the filter is operational.\n",
        "\n",
        "## Behauvioural Analysis and macro modelling\n",
        "\n",
        "The behauvioural analysis is done through macro modelling the universal biquad filter as a system. The system can be described with transfer functions and modelled with python.\n",
        "\n",
        "### Transfer Functions and frequency response\n",
        "\n",
        "The ASLK PRO Manual [@aslkpro2012] provides the transfer functions of the four filter outputs: low pass, high pass, band pass, and band stop. The transfer functions are adaptations of the general second order transfer function as seen in @eq-TFSecondOrder. [@razavi2018]\n",
        "\n",
        "In the following transfer function the input and output voltage are referenced according to @fig-BiquadCircuit. The sections only contain their specific transfer function and frequency response.\n",
        "\n",
        "**Low pass**\n",
        "\n",
        "The output if the low pass filter is marked in the circuit (@fig-BiquadCircuit) as $LPF$ and corresponds to $V_{03}$ in the transfer function @eq-TFLowpass.\n",
        "\n",
        "$$\n",
        "\\frac{V_{03}}{V_i} = \\frac{H_0}{\\left( 1 + \\frac{s}{\\omega_0 Q} + \\frac{s^2}{\\omega_0^2} \\right)}\n",
        "$$ {#eq-TFLowpass}\n",
        "\n",
        "@fig-freqResponseLowpass shows the amplitude and phase response of the low pass filter. The required frequency $f_0 = 1\\,kHz$ and quality factor $Q = 10$ recognizable in the bode plot. As the dc-gain was chosen to be $H_0 = 1$, the low pass filter has a amplitude amplification of 1 in the lower frequencies.\n"
      ],
      "id": "3580877c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: lst-freqResponseLowpass\n",
        "#| code-fold: true\n",
        "#| output: false\n",
        "\n",
        "# Behavioral Analysis Biquad Filter\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Initial values\n",
        "f0 = 1e3  # Resonance frequency in Hz\n",
        "w0 = 2 * np.pi * f0  # Angular frequency in rad/s\n",
        "Q = 10  # Quality factor\n",
        "H0 = 1  # Play around with this later\n",
        "\n",
        "# Logarithmic frequency axis\n",
        "frequencies = np.logspace(2, 4, 10000)  # Frequency from 10^2 to 10^4 Hz\n",
        "s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jω\n",
        "\n",
        "############################################\n",
        "# Transfer functions of Active Filters\n",
        "############################################\n",
        "\n",
        "### Numerator\n",
        "# Low Pass Filter\n",
        "b_lp = H0\n",
        "\n",
        "# High Pass Filter\n",
        "b_hp = (H0 * (s**2 / w0**2))\n",
        "\n",
        "# Band Pass Filter\n",
        "b_bp = (-H0 * (s / w0))\n",
        "\n",
        "# Band Stop Filter\n",
        "b_bs = -((1 + (s**2 / (w0**2))) * H0)\n",
        "\n",
        "# Denominator -> for all filters the same\n",
        "a0 = 1\n",
        "a1 = (s / (w0 * Q))\n",
        "a2 = (s**2 / (w0**2))\n",
        "\n",
        "den = a0 + a1 + a2\n",
        "\n",
        "############################################\n",
        "# Calculation of the transfer functions H(s)\n",
        "############################################\n",
        "Hs_lp = b_lp / den\n",
        "Hs_hp = b_hp / den\n",
        "Hs_bp = b_bp / den\n",
        "Hs_bs = b_bs / den\n",
        "\n",
        "# Bode Diagram\n",
        "fig, axs = plt.subplots(2)\n",
        "#fig.suptitle(\"frequency response of biquad filter\")\n",
        "\n",
        "# Low Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp)), label='low pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp)) * (180 / np.pi), label='low pass')\n",
        "'''\n",
        "# High Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_hp)), label='high pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_hp)) * (180 / np.pi), label='high pass')\n",
        "\n",
        "# Band Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bp)), label='band pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_bp)) * (180 / np.pi), label='band pass')\n",
        "\n",
        "# Band Stop Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bs)), label='band stop')\n",
        "axs[1].semilogx(frequencies, (np.angle(Hs_bs)) * (180 / np.pi), label='band stop')\n",
        "'''\n",
        "#axs[0].title(\"amplitude response\")\n",
        "axs[0].set_xlabel(\"frequency/Hz\")\n",
        "axs[0].set_ylabel(\"amplitude/dB\")\n",
        "axs[0].set_ylim(-50, 25)\n",
        "axs[0].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[0].legend(loc=1)\n",
        "\n",
        "#axs[1].title(\"phase response\")\n",
        "axs[1].set_xlabel(\"frequency/Hz\")\n",
        "axs[1].set_ylabel(\"phase/deg\")\n",
        "axs[1].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[1].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "plt.savefig(\"../images/sec_characterisation/freqResponseLowpass.png\", format=\"png\",dpi=1000)"
      ],
      "id": "lst-freqResponseLowpass",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Frequency response of the low pass filter](../images/sec_characterisation/freqResponseLowpass.png){#fig-freqResponseLowpass}\n",
        "\n",
        "With knowing the dc gain $H_0 = 1$ and quality factot $Q = 10$, the amplitude of the peak can be calculated as seen in @eq-calculatePeak. Expression the value in dB, gives peak amplitude of $A_{peak,dB} = 20.002\\,dB$ which corresponds to the peak value seen in @fig-freqResponseLowpass.\n",
        "\n",
        "**High pass**\n",
        "\n",
        "The output if the high pass filter is marked in the circuit (@fig-BiquadCircuit) as $HPF$ and corresponds to $V_{01}$ in the transfer function @eq-TFHighpass.\n",
        "\n",
        "$$\n",
        "\\frac{V_{01}}{V_i} = \\frac{\\left( H_0 \\cdot \\frac{s^2}{\\omega_0^2} \\right)}{\\left( 1 + \\frac{s}{\\omega_0 Q} + \\frac{s^2}{\\omega_0^2} \\right)} \n",
        "$$ {#eq-TFHighpass}\n",
        "\n",
        "@fig-freqResponseHighpass shows the amplitude and phase response of the high pass filter. The required frequency $f_0 = 1\\,kHz$ and quality factor $Q = 10$ recognizable in the bode plot. As the dc-gain was chosen to be $H_0 = 1$, the low pass filter has a amplitude amplification of 1 in the higher frequencies.\n"
      ],
      "id": "78535ba2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: lst-freqResponseHighpass\n",
        "#| code-fold: true\n",
        "#| output: false\n",
        "\n",
        "# Behavioral Analysis Biquad Filter\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Initial values\n",
        "f0 = 1e3  # Resonance frequency in Hz\n",
        "w0 = 2 * np.pi * f0  # Angular frequency in rad/s\n",
        "Q = 10  # Quality factor\n",
        "H0 = 1  # Play around with this later\n",
        "\n",
        "# Logarithmic frequency axis\n",
        "frequencies = np.logspace(2, 4, 10000)  # Frequency from 10^2 to 10^4 Hz\n",
        "s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jω\n",
        "\n",
        "############################################\n",
        "# Transfer functions of Active Filters\n",
        "############################################\n",
        "\n",
        "### Numerator\n",
        "# Low Pass Filter\n",
        "b_lp = H0\n",
        "\n",
        "# High Pass Filter\n",
        "b_hp = (H0 * (s**2 / w0**2))\n",
        "\n",
        "# Band Pass Filter\n",
        "b_bp = (-H0 * (s / w0))\n",
        "\n",
        "# Band Stop Filter\n",
        "b_bs = -((1 + (s**2 / (w0**2))) * H0)\n",
        "\n",
        "# Denominator -> for all filters the same\n",
        "a0 = 1\n",
        "a1 = (s / (w0 * Q))\n",
        "a2 = (s**2 / (w0**2))\n",
        "\n",
        "den = a0 + a1 + a2\n",
        "\n",
        "############################################\n",
        "# Calculation of the transfer functions H(s)\n",
        "############################################\n",
        "Hs_lp = b_lp / den\n",
        "Hs_hp = b_hp / den\n",
        "Hs_bp = b_bp / den\n",
        "Hs_bs = b_bs / den\n",
        "\n",
        "# Bode Diagram\n",
        "fig, axs = plt.subplots(2)\n",
        "#fig.suptitle(\"frequency response of biquad filter\")\n",
        "\n",
        "# Low Pass Filter\n",
        "#axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp)), label='low pass')\n",
        "#axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp)) * (180 / np.pi), label='low pass')\n",
        "\n",
        "# High Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_hp)), label='high pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_hp)) * (180 / np.pi), label='high pass')\n",
        "'''\n",
        "# Band Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bp)), label='band pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_bp)) * (180 / np.pi), label='band pass')\n",
        "\n",
        "# Band Stop Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bs)), label='band stop')\n",
        "axs[1].semilogx(frequencies, (np.angle(Hs_bs)) * (180 / np.pi), label='band stop')\n",
        "'''\n",
        "#axs[0].title(\"amplitude response\")\n",
        "axs[0].set_xlabel(\"frequency/Hz\")\n",
        "axs[0].set_ylabel(\"amplitude/dB\")\n",
        "axs[0].set_ylim(-50, 25)\n",
        "axs[0].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[0].legend(loc=1)\n",
        "\n",
        "#axs[1].title(\"phase response\")\n",
        "axs[1].set_xlabel(\"frequency/Hz\")\n",
        "axs[1].set_ylabel(\"phase/deg\")\n",
        "axs[1].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[1].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "plt.savefig(\"../images/sec_characterisation/freqResponseHighpass.png\", format=\"png\", dpi=1000)"
      ],
      "id": "lst-freqResponseHighpass",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Frequency response of the high pass filter](../images/sec_characterisation/freqResponseHighpass.png){#fig-freqResponseHighpass}\n",
        "\n",
        "**Band pass**\n",
        "\n",
        "The output for the band pass filter is marked as $BPF$ in @fig-BiquadCircuit. This denotes the point that is referenced in @eq-TFBandpass as $V_{02}$.\n",
        "\n",
        "$$\n",
        "\\frac{V_{02}}{V_i} = \\frac{\\left( - H_0 \\cdot \\frac{s}{\\omega_0} \\right)}{\\left( 1 + \\frac{s}{\\omega_0 Q} + \\frac{s^2}{\\omega_0^2} \\right)}\n",
        "$$ {#eq-TFBandpass}\n",
        "\n",
        "The band pass shown in @fig-freqResponseBandpass has its center frequency at $1\\,kHz$ as set in the requirements. Similarly to the low pass filter in @fig-freqResponseLowpass and the high pass filter in @fig-freqResponseHighpass the amplitude response peaks at this frequency, with its peak influenced by the quality factor.\n"
      ],
      "id": "c9d5bc24"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: lst-freqResponseBandpass\n",
        "#| code-fold: true\n",
        "#| output: false\n",
        "\n",
        "# Behavioral Analysis Biquad Filter\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Initial values\n",
        "f0 = 1e3  # Resonance frequency in Hz\n",
        "w0 = 2 * np.pi * f0  # Angular frequency in rad/s\n",
        "Q = 10  # Quality factor\n",
        "H0 = 1  # Play around with this later\n",
        "\n",
        "# Logarithmic frequency axis\n",
        "frequencies = np.logspace(2, 4, 10000)  # Frequency from 10^2 to 10^4 Hz\n",
        "s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jω\n",
        "\n",
        "############################################\n",
        "# Transfer functions of Active Filters\n",
        "############################################\n",
        "\n",
        "### Numerator\n",
        "# Low Pass Filter\n",
        "b_lp = H0\n",
        "\n",
        "# High Pass Filter\n",
        "b_hp = (H0 * (s**2 / w0**2))\n",
        "\n",
        "# Band Pass Filter\n",
        "b_bp = (-H0 * (s / w0))\n",
        "\n",
        "# Band Stop Filter\n",
        "b_bs = -((1 + (s**2 / (w0**2))) * H0)\n",
        "\n",
        "# Denominator -> for all filters the same\n",
        "a0 = 1\n",
        "a1 = (s / (w0 * Q))\n",
        "a2 = (s**2 / (w0**2))\n",
        "\n",
        "den = a0 + a1 + a2\n",
        "\n",
        "############################################\n",
        "# Calculation of the transfer functions H(s)\n",
        "############################################\n",
        "Hs_lp = b_lp / den\n",
        "Hs_hp = b_hp / den\n",
        "Hs_bp = b_bp / den\n",
        "Hs_bs = b_bs / den\n",
        "\n",
        "# Bode Diagram\n",
        "fig, axs = plt.subplots(2)\n",
        "#fig.suptitle(\"frequency response of biquad filter\")\n",
        "'''\n",
        "# Low Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp)), label='low pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp)) * (180 / np.pi), label='low pass')\n",
        "\n",
        "# High Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_hp)), label='high pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_hp)) * (180 / np.pi), label='high pass')\n",
        "'''\n",
        "# Band Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bp)), label='band pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_bp)) * (180 / np.pi), label='band pass')\n",
        "\n",
        "# Band Stop Filter\n",
        "#axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bs)), label='band stop')\n",
        "#axs[1].semilogx(frequencies, (np.angle(Hs_bs)) * (180 / np.pi), label='band stop')\n",
        "\n",
        "#axs[0].title(\"amplitude response\")\n",
        "axs[0].set_xlabel(\"frequency/Hz\")\n",
        "axs[0].set_ylabel(\"amplitude/dB\")\n",
        "axs[0].set_ylim(-50, 25)\n",
        "axs[0].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[0].legend(loc=1)\n",
        "\n",
        "#axs[1].title(\"phase response\")\n",
        "axs[1].set_xlabel(\"frequency/Hz\")\n",
        "axs[1].set_ylabel(\"phase/deg\")\n",
        "axs[1].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[1].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "plt.savefig(\"../images/sec_characterisation/freqResponseBandpass.png\", format=\"png\", dpi=1000)"
      ],
      "id": "lst-freqResponseBandpass",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Frequency response of the band pass filter](../images/sec_characterisation/freqResponseBandpass.png){#fig-freqResponseBandpass}\n",
        "\n",
        "**Band stop**\n",
        "\n",
        "The output for the band stop filter is marked in @fig-BiquadCircuit as $BSF$ and in the transfer function as $V_{04}$.\n",
        "\n",
        "$$\n",
        "\\frac{V_{04}}{V_i} = \\frac{\\left( 1 + \\frac{s^2}{\\omega_0^2} \\right) \\cdot H_0}{\\left( 1 + \\frac{s}{\\omega_0 Q} + \\frac{s^2}{\\omega_0^2} \\right)}\n",
        "$$ {#eq-TFBandstopFalse}\n",
        "\n",
        "[@renner2025] argues that @eq-TFBandstopFalse from the ASLK PRO Manual [@aslkpro2012] is incorrect, as using that equation produces inconsistent results. Using the negated form of @eq-TFBandstopFalse as seen in @eq-TFBandstopCorrect seems to produce the correct output. Therefore @eq-TFBandstopCorrect will be used for further analysis.\n",
        "\n",
        "$$\n",
        "\\frac{V_{04}}{V_i} = - \\frac{\\left( 1 + \\frac{s^2}{\\omega_0^2} \\right) \\cdot H_0}{\\left( 1 + \\frac{s}{\\omega_0 Q} + \\frac{s^2}{\\omega_0^2} \\right)}\n",
        "$$ {#eq-TFBandstopCorrect}\n",
        "\n",
        "@fig-freqResponseBandstop shows the frequency response of the band stop, with its center frequency at $1\\,kHz$.\n"
      ],
      "id": "aa6ea2ab"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: lst-freqResponseBandstop\n",
        "#| code-fold: true\n",
        "#| output: false\n",
        "\n",
        "# Behavioral Analysis Biquad Filter\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Initial values\n",
        "f0 = 1e3  # Resonance frequency in Hz\n",
        "w0 = 2 * np.pi * f0  # Angular frequency in rad/s\n",
        "Q = 10  # Quality factor\n",
        "H0 = 1  # Play around with this later\n",
        "\n",
        "# Logarithmic frequency axis\n",
        "frequencies = np.logspace(2, 4, 10000)  # Frequency from 10^2 to 10^4 Hz\n",
        "s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jω\n",
        "\n",
        "############################################\n",
        "# Transfer functions of Active Filters\n",
        "############################################\n",
        "\n",
        "### Numerator\n",
        "# Low Pass Filter\n",
        "b_lp = H0\n",
        "\n",
        "# High Pass Filter\n",
        "b_hp = (H0 * (s**2 / w0**2))\n",
        "\n",
        "# Band Pass Filter\n",
        "b_bp = (-H0 * (s / w0))\n",
        "\n",
        "# Band Stop Filter\n",
        "b_bs = -((1 + (s**2 / (w0**2))) * H0)\n",
        "\n",
        "# Denominator -> for all filters the same\n",
        "a0 = 1\n",
        "a1 = (s / (w0 * Q))\n",
        "a2 = (s**2 / (w0**2))\n",
        "\n",
        "den = a0 + a1 + a2\n",
        "\n",
        "############################################\n",
        "# Calculation of the transfer functions H(s)\n",
        "############################################\n",
        "Hs_lp = b_lp / den\n",
        "Hs_hp = b_hp / den\n",
        "Hs_bp = b_bp / den\n",
        "Hs_bs = b_bs / den\n",
        "\n",
        "# Bode Diagram\n",
        "fig, axs = plt.subplots(2)\n",
        "#fig.suptitle(\"frequency response of biquad filter\")\n",
        "'''\n",
        "# Low Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp)), label='low pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp)) * (180 / np.pi), label='low pass')\n",
        "\n",
        "# High Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_hp)), label='high pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_hp)) * (180 / np.pi), label='high pass')\n",
        "\n",
        "# Band Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bp)), label='band pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_bp)) * (180 / np.pi), label='band pass')\n",
        "'''\n",
        "# Band Stop Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bs)), label='band stop')\n",
        "axs[1].semilogx(frequencies, (np.angle(Hs_bs)) * (180 / np.pi), label='band stop')\n",
        "\n",
        "#axs[0].title(\"amplitude response\")\n",
        "axs[0].set_xlabel(\"frequency/Hz\")\n",
        "axs[0].set_ylabel(\"amplitude/dB\")\n",
        "axs[0].set_ylim(-50, 25)\n",
        "axs[0].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[0].legend(loc=1)\n",
        "\n",
        "#axs[1].title(\"phase response\")\n",
        "axs[1].set_xlabel(\"frequency/Hz\")\n",
        "axs[1].set_ylabel(\"phase/deg\")\n",
        "axs[1].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[1].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "plt.savefig(\"../images/sec_characterisation/freqResponseBandstop.png\", format=\"png\", dpi=1000)"
      ],
      "id": "lst-freqResponseBandstop",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Frequency response of the band stop filter](../images/sec_characterisation/freqResponseBandstop.png){#fig-freqResponseBandstop}\n",
        "\n",
        "**Comparison**\n",
        "\n",
        "@fig-freqResponseFilter shows all four frequency responses together in oen graph. It shows nicely that all three pass filters peak at the same freqeuncy and the same height. Comparing this plot with the one from [@aslkpro2012] gives reason to argue that the filter design on a theoretic system level should work.\n"
      ],
      "id": "3615c251"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: lst-freqResponseFilter\n",
        "#| code-fold: true\n",
        "#| output: false\n",
        "\n",
        "# Behavioral Analysis Biquad Filter\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Initial values\n",
        "f0 = 1e3  # Resonance frequency in Hz\n",
        "w0 = 2 * np.pi * f0  # Angular frequency in rad/s\n",
        "Q = 10  # Quality factor\n",
        "H0 = 1  # Play around with this later\n",
        "\n",
        "# Logarithmic frequency axis\n",
        "frequencies = np.logspace(2, 4, 10000)  # Frequency from 10^2 to 10^4 Hz\n",
        "s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jω\n",
        "\n",
        "############################################\n",
        "# Transfer functions of Active Filters\n",
        "############################################\n",
        "\n",
        "### Numerator\n",
        "# Low Pass Filter\n",
        "b_lp = H0\n",
        "\n",
        "# High Pass Filter\n",
        "b_hp = (H0 * (s**2 / w0**2))\n",
        "\n",
        "# Band Pass Filter\n",
        "b_bp = (-H0 * (s / w0))\n",
        "\n",
        "# Band Stop Filter\n",
        "b_bs = -((1 + (s**2 / (w0**2))) * H0)\n",
        "\n",
        "# Denominator -> for all filters the same\n",
        "a0 = 1\n",
        "a1 = (s / (w0 * Q))\n",
        "a2 = (s**2 / (w0**2))\n",
        "\n",
        "den = a0 + a1 + a2\n",
        "\n",
        "############################################\n",
        "# Calculation of the transfer functions H(s)\n",
        "############################################\n",
        "Hs_lp = b_lp / den\n",
        "Hs_hp = b_hp / den\n",
        "Hs_bp = b_bp / den\n",
        "Hs_bs = b_bs / den\n",
        "\n",
        "# Bode Diagram\n",
        "fig, axs = plt.subplots(2)\n",
        "#fig.suptitle(\"frequency response of biquad filter\")\n",
        "\n",
        "# Low Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp)), label='low pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp)) * (180 / np.pi), label='low pass')\n",
        "\n",
        "# High Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_hp)), label='high pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_hp)) * (180 / np.pi), label='high pass')\n",
        "\n",
        "# Band Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bp)), label='band pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_bp)) * (180 / np.pi), label='band pass')\n",
        "\n",
        "# Band Stop Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bs)), label='band stop')\n",
        "axs[1].semilogx(frequencies, (np.angle(Hs_bs)) * (180 / np.pi), label='band stop')\n",
        "\n",
        "#axs[0].title(\"amplitude response\")\n",
        "axs[0].set_xlabel(\"frequency/Hz\")\n",
        "axs[0].set_ylabel(\"amplitude/dB\")\n",
        "axs[0].set_ylim(-50, 25)\n",
        "axs[0].grid(True, which=\"both\", ls=\"--\")\n",
        "axs[0].legend(loc=1)\n",
        "\n",
        "#axs[1].title(\"phase response\")\n",
        "axs[1].set_xlabel(\"frequency/Hz\")\n",
        "axs[1].set_ylabel(\"phase/deg\")\n",
        "axs[1].grid(True, which=\"both\", ls=\"--\")\n",
        "axs[1].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "plt.savefig(\"../images/sec_characterisation/freqResponseFilter.png\", format=\"png\", dpi=1000)"
      ],
      "id": "lst-freqResponseFilter",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Behauvioural analysis of biquad filter](../images/sec_characterisation/freqResponseFilter.png){#fig-freqResponseFilter}\n",
        "\n",
        "### Stability\n",
        "\n",
        "The stability of the biquad is checked at different hierarchical levels. The first analysis considers the system from a theorectical standpoint with transfer functions, and checks if conceptual design of the biquad filter is stable. On a component level the stability of the integrators and adders is analyzed, to verify that the chosen values for resistors and capcitors do not induce oscillations through the feedback loop. \n",
        "\n",
        "(At last, the general stability of the OTA circuit itself needs to be checked, so that) <- lets see what we can find for this...\n",
        "\n",
        "#### System stability\n",
        "A system is stable if its impulse response is absolutley integrateable. In case of a given transfer function, this can also be checked by calculating the poles of the transfer function. If all the poles lay in the left half of the s-plane, the system is considered stable. There is a special case where single poles can lay on the $j\\omega$-axis, on their own or in combination with poles in the left half of the s-plane. Systems which fall under that, are called marginally stable. [@fliege1991]\n",
        "\n",
        "#### Pole-zero plot\n"
      ],
      "id": "22300ad7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: lst-poleZeroStability\n",
        "#| code-fold: true\n",
        "#| output: false\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.signal import tf2zpk\n",
        "\n",
        "# Given values\n",
        "f = 1e3\n",
        "w = 2 * np.pi * f\n",
        "R = 1e3\n",
        "C = 1 / (w * R)\n",
        "Q = 10\n",
        "H0 = 1\n",
        "\n",
        "# Calculate w0\n",
        "w0 = 1 / (R * C)\n",
        "\n",
        "# Transfer function coefficients\n",
        "a2 = 1 / w0**2\n",
        "a1 = 1 / (w0 * Q)\n",
        "a0 = 1\n",
        "\n",
        "# Define transfer functions manually as (numerator, denominator) pairs\n",
        "systems = {\n",
        "    'Low pass filter': ([H0], [a2, a1, a0]),\n",
        "    'High pass filter': ([H0 / w0**2, 0, 0], [a2, a1, a0]),\n",
        "    'Band pass filter': ([-H0 / w0, 0], [a2, a1, a0]),\n",
        "    'Band stop filter': ([H0 / w0**2, 0, H0], [a2, a1, a0])\n",
        "}\n",
        "\n",
        "# Function to plot pole-zero map\n",
        "def plot_pzmap(num, den, title, subplot_pos):\n",
        "    zeros, poles, _ = tf2zpk(num, den)\n",
        "    plt.subplot(2, 2, subplot_pos)\n",
        "    plt.plot(np.real(zeros), np.imag(zeros), 'go', label='Zeros')\n",
        "    plt.plot(np.real(poles), np.imag(poles), 'rx', label='Poles')\n",
        "    plt.axhline(0, color='gray', lw=0.5)\n",
        "    plt.axvline(0, color='gray', lw=0.5)\n",
        "    plt.title(title)\n",
        "    plt.xlim([-1500, 1500])\n",
        "    plt.ylim([-10000, 10000])\n",
        "    plt.grid(True)\n",
        "    plt.legend(loc='upper right')\n",
        "\n",
        "# Plot all systems\n",
        "plt.figure(figsize=(12, 10))\n",
        "for i, (title, (num, den)) in enumerate(systems.items(), 1):\n",
        "    plot_pzmap(num, den, title, i)\n",
        "\n",
        "plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "plt.savefig(\"../images/sec_characterisation/poleZeroStability.png\", format=\"png\", dpi=1000)"
      ],
      "id": "lst-poleZeroStability",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Pole-zero plot for all transfer functions](../images/sec_characterisation/poleZeroStability.png){#fig-poleZeroStability}\n",
        "\n",
        "@fig-poleZeroStability shows the pole-zero plots of all four filters, low pass, high pass, band pass and band stop. In all four plots the poles are located in the left half of the s-plane and the system can therefore theoretically be classified as stable. [@razavi2018] confirms this, as the article explains that with $Q \\rightarrow \\infty$ the poles of the system approach the $j\\omega$ axis and the system becomes unstable.\n",
        "\n",
        "This analysis onbly considers the system as a mathematical model and as a whole. Further considerations regarding the stability of the components, integrators and adders, and the stability of the operational amplifiers themselves, have to be done.\n",
        "\n",
        "#### Component stability\n",
        "\n",
        "Circuits with opamps often have feedback loops, meaning that the output of the operational amplifier is somehow connected to the inverted input of the opamp. These feedback loops become problematic when the feedback signal is in phase with the input signal, as positive feedback is created and the circuit is working as an oscillator. [@reisch2007]\n",
        "\n",
        "The stability of the non-inverting amplifier can be verified by calculating the phase reserve $\\alpha$ of the circuit. If $f_k$ is the frequency where the feedback gain is equal to 1 and $\\varphi_k$ is the corresponding phase to that frequency, then \n",
        "the phase reserve is calculated by:\n",
        "\n",
        "$$\n",
        "\\alpha = 180° - \\varphi_k\n",
        "$$\n",
        "\n",
        "For circuits to be considered stable, the phase reserve has to be positive. To reduce overshoots during the transient response, it is customary to have a phase reserve of $\\alpha > 45°$. [@reisch2007]\n",
        "\n",
        "![Example of a transcient response of a circuit with a phase reserve of $\\alpha = 5.7°$ [taken from @reisch2007]](/images/sec_characterisation/reisch_stability_example_trans.png){#fig-reischExampleStabilityTransient}\n",
        "\n",
        "Figure @fig-reischExampleStabilityTransient shows the transient response of a circuit with a phase reserve of $\\alpha = 5.7°$. The overshoots are clearly visible and number of the overshoots per puls are larger then the customary \"one over, one under\"-rule. As the phase reserve is positive, the figure shows that even though the transient response is not ideal, the oscillations are attenuated and the circuit is can be considered as stable.\n",
        "\n",
        "In practical application, the phase reserve can be graphically determined with the help of bode diagrams. The bode diagram of the circuit with an open feedback loop is simulated, so that the frequency $f_k$ can be read out. This is the frequency where the feedback gain is 1 or 0 dB. The corresponding frequency to that, is the phase of the feedback gain $\\varphi_k$, the difference between $-180°$ and $\\varphi_k$ is the phase reserve $\\alpha$. [@reisch2007]\n",
        "\n",
        "For the analysis of component stability the 5t-ota design from [@pretl2025] was used. @fig-circuitStabilityAdder and @fig-circuitStabilityIntegrator show the schematics that simulated the stability analysis for the components. In both cases the AC source was inserted in the open feedback loop and the output of the OTA was used to analyse the stability.\n",
        "\n",
        "![Circuit schematic of the stability analysis of the adder](../images/sec_characterisation/stability_adder_circuit.png){#fig-circuitStabilityAdder}\n",
        "\n",
        "![Circuit schematic of the stability analysis of the integrator](../images/sec_characterisation/stability_integrator_circuit.png){#fig-circuitStabilityIntegrator}\n",
        "\n",
        "In the following figures @fig-stabilityAdder and @fig-stabilityIntegrator this stability analysis method was used to determine the stability over the phase reserve.\n"
      ],
      "id": "c04d41e7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: lst-stabilityAdder\n",
        "#| code-fold: true\n",
        "#| output: false\n",
        "\n",
        "# Stability analysis adder\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import sys\n",
        "sys.path.insert(0, '../simulation')\n",
        "import ltspy3\n",
        "\n",
        "sd=ltspy3.SimData('../simulation/stability_adder.raw',[b'v(v_out)',b'frequency'])\n",
        "\n",
        "nvout = sd.variables.index(b'v(v_out)')\n",
        "nfrequency = sd.variables.index(b'frequency')\n",
        "\n",
        "fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 6), sharex=True)\n",
        "\n",
        "ax1.semilogx(sd.values[nfrequency],20*np.log10(abs(sd.values[nvout])))\n",
        "ax1.set_ylabel(\"Magnitude/dB\")\n",
        "ax1.axvline(3e5,color='red',linestyle='--')\n",
        "ax1.grid(True, which=\"both\", ls=\"--\")\n",
        "\n",
        "ax2.semilogx(sd.values[nfrequency],np.angle(sd.values[nvout], deg=True))\n",
        "ax2.axvline(3e5,color='red',linestyle='--')\n",
        "ax2.axhline(82.75,color='red',linestyle='--')\n",
        "ax2.set_ylabel(\"Phase/deg\")\n",
        "ax2.set_xlabel(\"Frequency/Hz\")\n",
        "\n",
        "\n",
        "plt.grid(True, which=\"both\", ls=\"--\")\n",
        "plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "plt.savefig(\"../images/sec_characterisation/stabilityAdder.png\", format=\"png\", dpi=1000)"
      ],
      "id": "lst-stabilityAdder",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Stability analysis of the adder](../images/sec_characterisation/stabilityAdder.png){#fig-stabilityAdder}\n",
        "\n",
        "The frequency response of the adder shows a phase $\\varphi_k = 83°$, when the gain is 1. Calculation the phase reserve from that\n",
        "\n",
        "$$\\alpha_{add} = 180° - \\varphi_k = 180° - 83° = 97° > 45°\n",
        "$$\n",
        "\n",
        "gives a phase reserves, that indicates stability for this component.\n"
      ],
      "id": "bc138a98"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: lst-stabilityIntegrator\n",
        "#| code-fold: true\n",
        "#| output: false\n",
        "\n",
        "# Stability analysis integrator\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import sys\n",
        "sys.path.insert(0, '../simulation')\n",
        "import ltspy3\n",
        "\n",
        "sd=ltspy3.SimData('../simulation/stability_integrator.raw',[b'v(v_out)',b'frequency'])\n",
        "\n",
        "nvout = sd.variables.index(b'v(v_out)')\n",
        "nfrequency = sd.variables.index(b'frequency')\n",
        "\n",
        "fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 6), sharex=True)\n",
        "\n",
        "ax1.semilogx(sd.values[nfrequency],20*np.log10(abs(sd.values[nvout])))\n",
        "ax1.set_ylabel(\"Magnitude/dB\")\n",
        "ax1.axvline(7e5,color='red',linestyle='--')\n",
        "ax1.grid(True, which=\"both\", ls=\"--\")\n",
        "\n",
        "ax2.semilogx(sd.values[nfrequency],np.angle(sd.values[nvout], deg=True))\n",
        "ax2.axvline(7e5,color='red',linestyle='--')\n",
        "ax2.axhline(68,color='red',linestyle='--')\n",
        "ax2.set_ylabel(\"Phase/deg\")\n",
        "ax2.set_xlabel(\"Frequency/Hz\")\n",
        "\n",
        "plt.grid(True, which=\"both\", ls=\"--\")\n",
        "plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "plt.savefig(\"../images/sec_characterisation/stabilityIntegrator.png\", format=\"png\", dpi=1000)"
      ],
      "id": "lst-stabilityIntegrator",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Stability analysis of the integrator](../images/sec_characterisation/stabilityIntegrator.png){#fig-stabilityIntegrator}\n",
        "\n",
        "The stability of the integrator circuit, as seen in @fig-stabilityIntegrator, shows a intersection of the magnitude plot with the $0\\,dB$ line at about $f_k = 70\\,kHz$, which corresponds to a phase of $\\varphi_k = 68°$. This would leave a phase reserve of:\n",
        "\n",
        "$$\n",
        "\\alpha_{int} = 180° - \\varphi_k = 112° > 45°\n",
        "$$\n",
        "\n",
        "Therefore the integrator would be stable.\n",
        "\n",
        "#### OTA stability\n",
        "\n",
        ":::{.callout-note}\n",
        "lets come back to this, if I should magically find some more time somewhere...\n",
        ":::\n",
        "\n",
        "### Ideal Opamp\n",
        "\n",
        "To check the behauviour of the implemented circuit against the modelled behauviour of the transfer function, the universal biquad was built as an ideal circuit with voltage-regulated current sources instead of OTAs. This simulation of the circuit verfies that the circuit implementation of the biquadratic filter with OTAs can fulfill the requirements at least in the ideal case.\n",
        "\n",
        "![Schematic of an universal biquad filter with ideal OTAs](../images/sec_characterisation/biquad_univ_circuit.png){#fig-CircuitBiquadIdeal}\n",
        "\n",
        "@fig-CircuitBiquadIdeal depicts the schematic of an universal biquad filter, where the OTAs are idealised with voltage controlled current sources. An ac simulation of this circuit can be viewed in @fig-idealCir.\n"
      ],
      "id": "dd158fa3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: lst-idealCir\n",
        "#| code-fold: true\n",
        "#| output: false\n",
        "\n",
        "# plot Ideal (voltage controlled current? source) biquad\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import sys\n",
        "sys.path.insert(0, '../simulation')\n",
        "import ltspy3\n",
        "\n",
        "sd=ltspy3.SimData('../simulation/biquad_univ.raw')\n",
        "\n",
        "nvoutLPF = sd.variables.index(b'v(lpf)')\n",
        "nvoutHPF = sd.variables.index(b'v(hpf)')\n",
        "nvoutBPF = sd.variables.index(b'v(bpf)')\n",
        "nvoutBSF = sd.variables.index(b'v(bsf)')\n",
        "nfrequency = sd.variables.index(b'frequency')\n",
        "\n",
        "fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 6), sharex=True)\n",
        "\n",
        "ax1.semilogx(sd.values[nfrequency],20*np.log10(abs(sd.values[nvoutLPF])),label='lpf')\n",
        "ax1.semilogx(sd.values[nfrequency],20*np.log10(abs(sd.values[nvoutHPF])),label='hpf')\n",
        "ax1.semilogx(sd.values[nfrequency],20*np.log10(abs(sd.values[nvoutBPF])),label='bpf')\n",
        "ax1.semilogx(sd.values[nfrequency],20*np.log10(abs(sd.values[nvoutBSF])),label='bsf')\n",
        "ax1.set_xlim([10e1,10e3])\n",
        "ax1.set_ylim([-40,20])\n",
        "ax1.set_ylabel(\"Magnitude/dB\")\n",
        "ax1.grid(True, which=\"both\", ls=\"--\")\n",
        "ax1.legend()\n",
        "\n",
        "ax2.semilogx(sd.values[nfrequency],np.angle(sd.values[nvoutLPF], deg=True),label='lpf')\n",
        "ax2.semilogx(sd.values[nfrequency],np.angle(sd.values[nvoutHPF], deg=True),label='hpf')\n",
        "ax2.semilogx(sd.values[nfrequency],np.angle(sd.values[nvoutBPF], deg=True),label='bpf')\n",
        "ax2.semilogx(sd.values[nfrequency],np.angle(sd.values[nvoutBSF], deg=True),label='bsf')\n",
        "ax2.set_ylabel(\"Phase/deg\")\n",
        "ax2.set_xlabel(\"Frequency/Hz\")\n",
        "ax2.legend()\n",
        "\n",
        "plt.grid(True, which=\"both\", ls=\"--\")\n",
        "plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "plt.savefig(\"../images/sec_characterisation/idealCir.png\", format=\"png\", dpi=1000)"
      ],
      "id": "lst-idealCir",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Simulation of an idealised biquad](../images/sec_characterisation/idealCir.png){#fig-idealCir}\n",
        "\n",
        "@fig-compTfIdealAmplitude and @fig-compTfIdealPhase compares the system-theoretic analysis with transfer functions with the simulated idealised of the filter design with each other. Both plots show very nicely that the amplitude response as well as the phase response of all four filters match with their simulated and calculated responses.\n"
      ],
      "id": "4b4b5564"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: lst-compTfIdealAmplitude\n",
        "#| code-fold: true\n",
        "#| output: false\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import sys\n",
        "sys.path.insert(0, '../simulation')\n",
        "import ltspy3\n",
        "\n",
        "sd=ltspy3.SimData('../simulation/biquad_univ.raw')\n",
        "\n",
        "nvoutLPF = sd.variables.index(b'v(lpf)')\n",
        "nvoutHPF = sd.variables.index(b'v(hpf)')\n",
        "nvoutBPF = sd.variables.index(b'v(bpf)')\n",
        "nvoutBSF = sd.variables.index(b'v(bsf)')\n",
        "nfrequency = sd.variables.index(b'frequency')\n",
        "\n",
        "#behauvioural moddling with tfs\n",
        "\n",
        "# Initial values\n",
        "f0 = 1000  # Resonance frequency in Hz\n",
        "w0 = 2 * np.pi * f0  # Angular frequency in rad/s\n",
        "Q = 10  # Quality factor\n",
        "H0 = 1  # Play around with this later\n",
        "\n",
        "# Logarithmic frequency axis\n",
        "frequencies = np.logspace(0, 5, 10000)  # Frequency from 10^2 to 10^4 Hz\n",
        "s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jω\n",
        "\n",
        "############################################\n",
        "# Transfer functions of Active Filters\n",
        "############################################\n",
        "\n",
        "\n",
        "### Numerator\n",
        "# Low Pass Filter\n",
        "b_lp = H0\n",
        "\n",
        "# High Pass Filter\n",
        "b_hp = (H0 * (s**2 / w0**2))\n",
        "\n",
        "# Band Pass Filter\n",
        "b_bp = (-H0 * (s / w0))\n",
        "\n",
        "# Band Stop Filter\n",
        "b_bs = -(1 + (s**2 / (w0**2))) * H0\n",
        "\n",
        "# Denominator -> for all filters the same\n",
        "a0 = 1\n",
        "a1 = (s / (w0 * Q))\n",
        "a2 = (s**2 / (w0**2))\n",
        "\n",
        "den = a0 + a1 + a2\n",
        "\n",
        "############################################\n",
        "# Calculation of the transfer functions H(s)\n",
        "############################################\n",
        "Hs_lp = b_lp / den\n",
        "Hs_hp = b_hp / den\n",
        "Hs_bp = b_bp / den\n",
        "Hs_bs = b_bs / den\n",
        "\n",
        "#mag plots\n",
        "\n",
        "fig, axs = plt.subplots(2, 2, sharex=True, sharey=True)\n",
        "\n",
        "ax1, ax2, ax3, ax4 = axs.flatten()\n",
        "\n",
        "# Plotting each\n",
        "ax1.semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp)), label='tf')\n",
        "ax1.semilogx(sd.values[nfrequency], 20 * np.log10(abs(sd.values[nvoutLPF])), label='ngspice')\n",
        "ax1.set_ylabel(\"magnitude/dB\")\n",
        "ax1.set_title(\"low pass filter\")\n",
        "ax1.set_xlim([10,10e4])\n",
        "ax1.set_ylim([-60,25])\n",
        "ax1.grid(True, which=\"both\", ls=\"--\")\n",
        "ax1.legend()\n",
        "\n",
        "ax2.semilogx(frequencies, 20 * np.log10(np.abs(Hs_hp)), label='tf')\n",
        "ax2.semilogx(sd.values[nfrequency], 20 * np.log10(abs(sd.values[nvoutHPF])), label='ngspice')\n",
        "ax2.set_title(\"high pass filter\")\n",
        "#ax2.set_xlim([10,10e3])\n",
        "#ax2.set_ylim([-40,25])\n",
        "ax2.grid(True, which=\"both\", ls=\"--\")\n",
        "ax2.legend()\n",
        "\n",
        "ax3.semilogx(frequencies, 20 * np.log10(np.abs(Hs_bp)), label='tf')\n",
        "ax3.semilogx(sd.values[nfrequency], 20 * np.log10(abs(sd.values[nvoutBPF])), label='ngspice')\n",
        "ax3.set_xlabel(\"frequency/Hz\")\n",
        "ax3.set_ylabel(\"magnitude/dB\")\n",
        "ax3.set_title(\"band pass filter\")\n",
        "#ax3.set_xlim([10,10e3])\n",
        "#ax3.set_ylim([-40,25])\n",
        "ax3.grid(True, which=\"both\", ls=\"--\")\n",
        "ax3.legend()\n",
        "\n",
        "ax4.semilogx(frequencies, 20 * np.log10(np.abs(Hs_bs)), label='tf')\n",
        "ax4.semilogx(sd.values[nfrequency], 20 * np.log10(abs(sd.values[nvoutBSF])), label='ngspice')\n",
        "ax4.set_xlabel(\"frequency/Hz\")\n",
        "ax4.set_title(\"band stop filter\")\n",
        "#ax4.set_xlim([10,10e3])\n",
        "#ax4.set_ylim([-40,25])\n",
        "ax4.grid(True, which=\"both\", ls=\"--\")\n",
        "ax4.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "plt.savefig(\"../images/sec_characterisation/compTfIdealAmplitude.png\", format=\"png\", dpi=1000)"
      ],
      "id": "lst-compTfIdealAmplitude",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Comparison of the amplitude response between the transfer functions and idealised circuit](../images/sec_characterisation/compTfIdealAmplitude.png){#fig-compTfIdealAmplitude}\n"
      ],
      "id": "9f7bea0a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: lst-compTfIdealPhase\n",
        "#| code-fold: true\n",
        "#| output: false\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import sys\n",
        "sys.path.insert(0, '../simulation')\n",
        "import ltspy3\n",
        "\n",
        "sd=ltspy3.SimData('../simulation/biquad_univ.raw')\n",
        "\n",
        "nvoutLPF = sd.variables.index(b'v(lpf)')\n",
        "nvoutHPF = sd.variables.index(b'v(hpf)')\n",
        "nvoutBPF = sd.variables.index(b'v(bpf)')\n",
        "nvoutBSF = sd.variables.index(b'v(bsf)')\n",
        "nfrequency = sd.variables.index(b'frequency')\n",
        "\n",
        "#behauvioural moddling with tfs\n",
        "\n",
        "# Initial values\n",
        "f0 = 1000  # Resonance frequency in Hz\n",
        "w0 = 2 * np.pi * f0  # Angular frequency in rad/s\n",
        "Q = 10  # Quality factor\n",
        "H0 = 1  # Play around with this later\n",
        "\n",
        "# Logarithmic frequency axis\n",
        "frequencies = np.logspace(0, 4, 10000)  # Frequency from 10^2 to 10^4 Hz\n",
        "s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jω\n",
        "\n",
        "############################################\n",
        "# Transfer functions of Active Filters\n",
        "############################################\n",
        "\n",
        "\n",
        "### Numerator\n",
        "# Low Pass Filter\n",
        "b_lp = H0\n",
        "\n",
        "# High Pass Filter\n",
        "b_hp = (H0 * (s**2 / w0**2))\n",
        "\n",
        "# Band Pass Filter\n",
        "b_bp = (-H0 * (s / w0))\n",
        "\n",
        "# Band Stop Filter\n",
        "b_bs = -(1 + (s**2 / (w0**2))) * H0\n",
        "\n",
        "# Denominator -> for all filters the same\n",
        "a0 = 1\n",
        "a1 = (s / (w0 * Q))\n",
        "a2 = (s**2 / (w0**2))\n",
        "\n",
        "den = a0 + a1 + a2\n",
        "\n",
        "############################################\n",
        "# Calculation of the transfer functions H(s)\n",
        "############################################\n",
        "Hs_lp = b_lp / den\n",
        "Hs_hp = b_hp / den\n",
        "Hs_bp = b_bp / den\n",
        "Hs_bs = b_bs / den\n",
        "\n",
        "#phase plots\n",
        "\n",
        "fig, axs = plt.subplots(2, 2, sharex=True, sharey=True)\n",
        "\n",
        "ax1, ax2, ax3, ax4 = axs.flatten()\n",
        "\n",
        "# Plotting each\n",
        "ax1.semilogx(frequencies, np.angle(Hs_lp, deg=True), label='tf')\n",
        "ax1.semilogx(sd.values[nfrequency],np.angle(sd.values[nvoutLPF], deg=True),label='ngspice')\n",
        "ax1.set_ylabel(\"phase/deg\")\n",
        "ax1.set_title(\"low pass filter\")\n",
        "ax1.set_xlim([10,10e3])\n",
        "#ax1.set_ylim([-40,25])\n",
        "ax1.grid(True, which=\"both\", ls=\"--\")\n",
        "ax1.legend()\n",
        "\n",
        "ax2.semilogx(frequencies, np.angle(Hs_hp, deg=True), label='tf')\n",
        "ax2.semilogx(sd.values[nfrequency],np.angle(sd.values[nvoutHPF], deg=True),label='ngspice')\n",
        "ax2.set_title(\"high pass filter\")\n",
        "#ax1.set_xlim([10,10e3])\n",
        "#ax1.set_ylim([-40,25])\n",
        "ax2.grid(True, which=\"both\", ls=\"--\")\n",
        "ax2.legend()\n",
        "\n",
        "ax3.semilogx(frequencies, np.angle(Hs_bp, deg=True), label='tf')\n",
        "ax3.semilogx(sd.values[nfrequency],np.angle(sd.values[nvoutBPF], deg=True),label='ngspice')\n",
        "ax3.set_xlabel(\"frequency/Hz\")\n",
        "ax3.set_ylabel(\"phase/deg\")\n",
        "ax3.set_title(\"band pass filter\")\n",
        "#ax1.set_xlim([10,10e3])\n",
        "#ax1.set_ylim([-40,25])\n",
        "ax3.grid(True, which=\"both\", ls=\"--\")\n",
        "ax3.legend()\n",
        "\n",
        "ax4.semilogx(frequencies, np.angle(Hs_bs, deg=True), label='tf')\n",
        "ax4.semilogx(sd.values[nfrequency],np.angle(sd.values[nvoutBSF], deg=True),label='ngspice')\n",
        "ax4.set_xlabel(\"frequency/Hz\")\n",
        "ax4.set_title(\"band stop filter\")\n",
        "#ax1.set_xlim([10,10e3])\n",
        "#ax1.set_ylim([-40,25])\n",
        "ax4.grid(True, which=\"both\", ls=\"--\")\n",
        "ax4.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "#plt.show()\n",
        "\n",
        "plt.savefig(\"../images/sec_characterisation/compTfIdealPhase.png\", format=\"png\", dpi=1000)"
      ],
      "id": "lst-compTfIdealPhase",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "![Comparison of the phase response between the transfer functions and idealised circuit](../images/sec_characterisation/compTfIdealPhase.png){#fig-compTfIdealPhase}"
      ],
      "id": "0e1d93c9"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/atakan/quarto-env/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}