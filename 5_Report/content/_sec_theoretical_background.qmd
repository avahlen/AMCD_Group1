# Theoretical Background

my idea was to group all theoretics into one chapter, like a when the information becomes necessary during the quarto book, people can just jump back to this. we would circumvent having to introduce every little concept seperately whenever it comes up...

:::{.callout-warning}
I am thinking about changing the order, so that we are starting with biquads and work through the filter design from big to small...
:::

This chapter introduces the theory and core concepts necessary for IC design of a biquad filter. It is structured in a way, that it goes from the big picture to the small components. First, biquad filters are introduced with a focus on the universal biquad filter. After that, operational amplifiers come into the the foreground, as biquad filters make use of them in their circuits. Operational amplifiers are looked upon from an IC design standpoint.

## Biquad filter

The biquadratic filter, also known as the biquad filter, has its earliest implementation in the 1960s but is still in use today, most commonly in radio frequency receivers [@razavi2018]. In its application in RF-technology, it is used to remove unwanted neighboring signals ans noise [@razavi2024]. As biquad filter are second-order filters, they are also used as building blocks for higher filter implementations, by cascading them and adding first order filters [@aslkpro2012].

### Universal biquad filter

For the filter design in this project, an universal biquad filter is used. The universal biquad filter is biquad filter variant with four operational amplifiers used in its design and the property of being able to be used in four different filter variants. Depending on the output of the universal biquad used, a low pass filter, high pass filter, band pass filter, or band stop filter will be implemented. This can be seen in (ref to figure of biquad fitler design). [@aslkpro2012]

![circuit design of an universal biquad filter](/images/sec_theorectical_background/biquad_circuit.pdf){#fig-BiquadCircuit width=100%}

The universal biquad filter consists of two non-inverting amplifiers working as adders in the circuit and two integrators. By setting $R$ and $C$ to specific values, the resonance frequency can be chosen. Other parameters adjustable in the universal biquad filter are the quality factor $Q$ and the low-frequency gain $H_0$. The quality factor and low-frequency gain determine the frequency response peaks of the low pass filter and the band pass filter. [@aslkpro2012]

#### Characteristics

As the universal biquad filter is a second order filter with the specified outputs low pass, high pass, band pass, and band stop, each filter option can be described with a tranfer function on system level. The general second order transfer function is:

$$
H(s) = \frac{a_1 s^2 + b_1 s + c_1}{a_2 s^2 + b_2 s + c_2}
$$ {#eq-TFSecondOrder}

The coeffcients can be choosen so, that different responses, like low pass, high pass, band pass, and band stop are achieved.

In filter design a variant of this generalized transfer function is often choosen because it is easier describe the system by quality factor and angular frequency. @eq-TFSecondOrderBiquad is an exemplatory low pass filter with a transfer function specified for filter design. [@razavi2018]

$$
H(s) = \frac{\omega_n^2}{s^2 + \frac{\omega_n}{Q} s + \omega_n^2}
$$ {#eq-TFSecondOrderBiquad}

$Q$ determines amoung other things the amount of peaking the transfer function has at the chosen frequency. @fig-lowPassDifferentQ shows this graphically, the amout of peaking increases with increasing quality factor $Q$.

```{python}
#| label: fig-lowPassDifferentQ
#| fig-cap: "Low pass filter with different quality factors"
#| code-fold: true

# Behavioral Analysis Biquad Filter

import numpy as np
import matplotlib.pyplot as plt

# Initial values
f0 = 1e3  # Resonance frequency in Hz
w0 = 2 * np.pi * f0  # Angular frequency in rad/s
Q1 = 1  # Quality factor
Q2 = 2
Q3 = 5
Q4 = 10
Q5 = 100
H0 = 1  # Play around with this later

# Logarithmic frequency axis
frequencies = np.logspace(2, 4, 10000)  # Frequency from 10^2 to 10^4 Hz
s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jÏ‰

############################################
# Transfer functions of Active Filters
############################################

### Numerator
# Low Pass Filter
b_lp = H0

# High Pass Filter
#b_hp = (H0 * (s**2 / w0**2))

# Band Pass Filter
#b_bp = (-H0 * (s / w0))

# Band Stop Filter
#b_bs = -((1 + (s**2 / (w0**2))) * H0)

# Denominator -> for all filters the same
a0 = 1
a1_1 = (s / (w0 * Q1))
a1_2 = (s / (w0 * Q2))
a1_3 = (s / (w0 * Q3))
a1_4 = (s / (w0 * Q4))
a1_5 = (s / (w0 * Q5))
a2 = (s**2 / (w0**2))

den1 = a0 + a1_1 + a2
den2 = a0 + a1_2 + a2
den3 = a0 + a1_3 + a2
den4 = a0 + a1_4 + a2
den5 = a0 + a1_5 + a2

############################################
# Calculation of the transfer functions H(s)
############################################
Hs_lp_1 = b_lp / den1
Hs_lp_2 = b_lp / den2
Hs_lp_3 = b_lp / den3
Hs_lp_4 = b_lp / den4
Hs_lp_5 = b_lp / den5
#Hs_hp = b_hp / den
#Hs_bp = b_bp / den
#Hs_bs = b_bs / den

# Bode Diagram
fig, axs = plt.subplots(2)
#fig.suptitle("frequency response of biquad filter")

# Low Pass Filter
axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp_1)), label='$Q = 1$')
axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp_1)) * (180 / np.pi), label='$Q = 1$')
axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp_2)), label='$Q = 2$')
axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp_2)) * (180 / np.pi), label='$Q = 2$')
axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp_3)), label='$Q = 5$')
axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp_3)) * (180 / np.pi), label='$Q = 5$')
axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp_4)), label='$Q = 10$')
axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp_4)) * (180 / np.pi), label='$Q = 10$')
axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp_5)), label='$Q = 100$')
axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp_5)) * (180 / np.pi), label='$Q = 100$')
'''
# High Pass Filter
axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_hp)), label='high pass')
axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_hp)) * (180 / np.pi), label='high pass')

# Band Pass Filter
axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bp)), label='band pass')
axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_bp)) * (180 / np.pi), label='band pass')

# Band Stop Filter
axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bs)), label='band stop')
axs[1].semilogx(frequencies, (np.angle(Hs_bs)) * (180 / np.pi), label='band stop')
'''
#axs[0].title("amplitude response")
axs[0].set_xlabel("frequency/Hz")
axs[0].set_ylabel("amplitude/dB")
#axs[0].set_ylim(-50, 25)
axs[0].grid(True, which="both", ls="--")
axs[0].legend(loc=1)

#axs[1].title("phase response")
axs[1].set_xlabel("frequency/Hz")
axs[1].set_ylabel("phase/deg")
axs[1].grid(True, which="both", ls="--")
axs[1].legend()

plt.tight_layout()
plt.show()
```

The height of the peak can be calculated with:

$$
A_{peak} = \frac{Q}{\sqrt{1 - \frac{1}{4Q^2}}}
$$ {#eq-calculatePeak}

For $Q = 100$ the peak is $A_{peak} = 100.001$, which converted into dB is $A_{peak,dB} = 40\,dB$, as is shown in @fig-lowPassDifferentQ.



## MOSFET (Metal-Oxide-Semiconductor Field-Effect-Transistor )

To get a general insight how an Operational Amplifier works and to uderstand the difference between a "off th shelf" part and a self made IC-Design, its nessesary to understand the main component: The MOSFET.

To be more precise, its nesessary to understand the behaviour of a MOSFET. Since were designing one from scratch, its possible to change the width W and leght L of the pysical layout. By doing this there is a lot of room for freedom and experimental space. 


BILD N-MOS

BILD P-MOS


### Small-Signal Representation

### Sizing 

As mentioned earlier we have several degrees of freedom in our design, like $W$, $L$, or the bias current $I_D$. 
The problem is, that its extremly complex to describe a MOSFET mathmaticly and on top to that of change values to get a desired behaviour. Glady a wide used technique, which was introduced by P. Jespers and B. Murmann, is the g_\mathrm{m}/I_\mathrm{D} approach \ref{Jesper.... Pretl 3).

*Saturation* 
Saturation is a specific operation mode of a transistor. Its also called "ON mode", because a channel between drain and source is created. This state is reached when the voltage $V_DS >= (V_GS - V_th)$. When this happens the drain-source current I_DS gets stable (saturates) and becomes nearly indipendet of V_DS. Still it can be very well controlled via V_GS, due to an effect called "pinch-off" (\ref{https://en.wikipedia.org/wiki/MOSFET}).

The g_\mathrm{m}/I_\mathrm{D} method is primarly inteded to be used in saturated MOSFETs. To ensure this we keep the drain-source voltage as V_ds = V_DD / 2.

### Current Mirror

### Differential Stage





## Operational Amplifier

i think this is kinda where our focus is again, so like a good theory is necessary

### Current Mirror

we talked a lot about the stages during the lectures, so i thought good idea to introduce them seperatly 

### Differential Stage

both of them (and then maybe? slot them together, could be ddone in varients???)

### Variants ?

maybe like miller opamp or something like that

### Small-Signal Representation

thought i would be a good idea to at least have this somewhere

### Sizing 

dont know if it makes sense here, i think at some theoretics should be written about sizing, but open to discuss placement

