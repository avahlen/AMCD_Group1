{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"IC Design of a Universal Biquad Filter\"\n",
        "author: \n",
        "  - name: Atakan Baydogan\n",
        "    orcid: \n",
        "    email: abaydogan@stud.hs-bremen.de\n",
        "    corresponding: true\n",
        "    roles: \"Lead author\"\n",
        "   # affiliation:\n",
        "    #  - name: Hochschule Bremen - City University of Applied Sciences (HSB)\n",
        "     #   city: Bremen\n",
        "      #  state: Germany\n",
        "       # url: https://www.hs-bremen.de  \n",
        "  - name: Onno Kriens\n",
        "    orcid: \n",
        "    email: okriens@stud.hs-bremen.de\n",
        "    corresponding: true\n",
        "    roles: \"Lead author\"\n",
        "  - name: Finn Ringelsiep\n",
        "    orcid: \n",
        "    email: fringelsiep@stud.hs-bremen.de\n",
        "    corresponding: true\n",
        "    roles: \"Lead author\"\n",
        "  - name: Alicia von Ahlen\n",
        "    orcid: 0009-0007-3049-2455\n",
        "    email: avahlen@stud.hs-bremen.de\n",
        "    corresponding: true\n",
        "    roles: \"Lead author\"\n",
        "\n",
        "keyword:\n",
        "  - Filter Design \n",
        "  - PCB\n",
        "\n",
        "abstract: |\n",
        "    Lorem ipsum\n",
        "\n",
        "    - An abstract should provide a self-contained summary of your entire paper or research project.\n",
        "    - It aims to give readers a quick understanding of what you did, why it's important, and what you found. \n",
        "    - It should be a good starting point for anyone considering reading your full work. \n",
        "    - Introduction: Briefly introduce the topic and its significance.\n",
        "    - Research Question/Aim: State the problem you are addressing and the purpose of your research.\n",
        "    - Methodology: Briefly describe how you conducted your research (e.g., experiments, interviews, analysis).\n",
        "    - Key Findings: Summarize the main results or conclusions of your study.\n",
        "    - Significance/Implications: Explain why your findings are important and what they contribute to the field. \n",
        "    - Be concise: Use short, clear sentences and avoid unnecessary jargon. \n",
        "    - Use keywords: Include relevant keywords that will help readers find your abstract in databases. \n",
        "    - Follow formatting guidelines: Check for any specific requirements or guidelines for your specific journal or conference. \n",
        "    - Revise and edit: Make sure your abstract is clear, accurate, and within the word limit. \n",
        "    - Consider the audience: Tailor your language to your target audience (e.g., other researchers in your field, or a wider audience).\n",
        "\n",
        "date: last-modified\n",
        "number-sections: true\n",
        "bibliography: references.bib\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        ":::{.callout-important}\n",
        "We need to go through the whole document and check whether opamp or ota is the right word in the context!\n",
        "\n",
        "In the end we need to go through this, and change all second to last meantions of OP/operational amplifier to opamp \n",
        ":::\n",
        "\n",
        "# TOC (only temporary) {.unnumbered}\n",
        "\n",
        "- abstract\n",
        "- introduction (motivation, goals, requirements, restrictions)\n",
        "- filter design (theorectical background, methods)\n",
        "- characterisation (filter requirements, theory in python, ideal circuit)\n",
        "- design (real circuit, xschem, klayout)\n",
        "- discussion\n",
        "- conclusion\n",
        "\n",
        "\n",
        "\n",
        "## Gliederung vorschlag (Atakan)\n",
        "\n",
        "1 abstract\n",
        "2 Introduction\n",
        "3 Theoretical background \n",
        "    3.1 OTA\n",
        "    3.2 Miller / 2order /biquard\n",
        "    3.3 system overview\n",
        "    3.4 methods\n",
        "4 Charactaristic\n",
        "    4.1 req\n",
        "    4.2 python\n",
        "    4.5 LTspice \n",
        "5 IC design\n",
        "    5.1 ideal\n",
        "    5.2 gm/id\n",
        "    5.3 real \n",
        "6 klayout\n",
        "6 discussion\n",
        "7 conclusion\n",
        "\n",
        "## ONNO\n",
        "\n",
        "1. Abstract\n",
        "\n",
        "2. Intruduction\n",
        "\n",
        "3. Theoretical View\n",
        "\t3.1 (OP)\n",
        "\t3.2 OTA\n",
        "\t3.3 Biasing\n",
        "\t3.4 Biquad\n",
        "\n",
        "4. Top_Level (ASLK)\n",
        "\t4.1 Simulation\n",
        "\t\t4.1.1 Python\n",
        "\t\t4.1.2 PSpice\n",
        "\t\t4.1.3 Xschem\n",
        "\n",
        "5. Bauteilebene\n",
        "\t5.1 Intruduction (Pretl)\n",
        "\t5.2 Parameters\n",
        "\t5.2 Xschem\n",
        "\t5.3 Miller\n",
        "\n",
        "6. IC-Design\n",
        "\tK_Layout\n",
        "7. Discussion\n",
        "\n",
        "\n",
        "## TOC suggestion (Main)\n",
        "\n",
        "1 Abstract (max. 0,5 page)\n",
        "\n",
        "2 Introduction (1 page)\n",
        "2.1 Motivation\n",
        "2.2 Scope\n",
        "2.3 Constraints (Meiners Kram)\n",
        "\n",
        "3 Theoretical Background\n",
        "3.1 Opamp\n",
        "3.1.1 Current Mirror\n",
        "3.1.2 Diff Stage\n",
        "3.1.2 Variants (like Miller maybe?)\n",
        "3.1.3 Small signal representation\n",
        "3.1.4 Stability\n",
        "3.1.5 Sizing?\n",
        "3.2 Biquad\n",
        "3.2.1 Characteristics\n",
        "3.2.2 Stability\n",
        "\n",
        "4 Characetrisation\n",
        "4.1 Behauvioural analysis\n",
        "4.1.1 Python\n",
        "4.1.2 Ideal Opamp?\n",
        "4.2 Implementation (real circuit)\n",
        "4.2.1 Used opamp representation\n",
        "4.2.2 Sizing\n",
        "\n",
        "(5 Design \n",
        "5.1 methods\n",
        "5.1.1 Xschem\n",
        "5.1.2 ngspice\n",
        "5.1.3 KLayout \n",
        "5.2 Process) siehe finn\n",
        "\n",
        "6 Discussion\n",
        "6.1 Stability Analysis\n",
        "6.2 Comparision\n",
        "6.2.1 Python\n",
        "6.2.2 Ideal\n",
        "6.2.3 Real\n",
        "6.3 is filter good?\n",
        "\n",
        "7 Conculsion and outlook\n",
        "\n",
        "# Introduction\n",
        "\n",
        ":::{.callout-warning}\n",
        "Check for reading flow please (for whole chapter)\n",
        ":::\n",
        "\n",
        "This chapter provides a short motivation and overview for the IC design process done during the lecture \"Analogue and Digital Mixed-Signal Circuit Design\" that Prof. Dr.-Ing. M. Meiners gives in the graduate course Electronic Engineering M.Sc. at City University of Applied Sciences Bremen.\n",
        "\n",
        "The chapter will start with the motivation behind the Biquad IC filter design, outline the scope of work of the project, and ends with giving concrete specifications for the implemented filter.\n",
        "\n",
        "## Motivation\n",
        "\n",
        "The design and implementation of analog filters is a cornerstone in signal processing, with applications ranging from audio processing to communication systems. Among these, second order fitlers, like the biquad filter, are versatile building blocks due to its ability to realize four types of second order filters - low pass, high pass, band pass, and band stop. This project focuses on the integrated circuit (IC) design of a biquad filter, to get insight into the theortical and practical engineering considerations behind IC design.\n",
        "\n",
        "For a deeper understanding of IC design, this project does not rely on off-the-shelf operational amplifiers for the filter design, but aims to implement the entire filter architecture at the transistor level. This approach not only deepens the understanding of analog filter behavior but also introduces the challenges and intricacies of IC design, such as layout constraints, power efficiency, and stability.\n",
        "\n",
        "This project demonstrates the design process of IC design from theorectical modelling, over simulation and design constraints to prototyping and to learn hands-on experience with tools used during the design process.\n",
        "\n",
        "## Scope of the project\n",
        "\n",
        "The scope of this project is supposed to follow a real-world design flow, starting at a theorectical analysis of the specified filter and - in the best case - end in a tap-out of a prototype. If that stage is reached the prototype can be compared to the theorectical and simulation results obtained during the design process and checked for functionality.\n",
        "\n",
        "As a tap-out of a prototype is fairly unrealistic in the time given, the goal is to simulate the specified filter with templates for operational amplifiers and base the IC layout on these templates.\n",
        "\n",
        "All in all, this project includes a systems analysis if the specified filter, simulation results with ideal components and real components, taken from provided templates, and a physical layout prototype.\n",
        "\n",
        "## Specifications\n",
        "\n",
        ":::{.callout-warning}\n",
        "Not sure if this is written in the correct time!?!\n",
        ":::\n",
        "\n",
        "The main onjective is to design a universal biquad filter, based on the filter design proposed in the ASLK PRO Board Manual from Texas Instruments [@aslkpro2012]. The biquad filter shall have the following specifications:\n",
        "\n",
        "$$\n",
        "f_0 = 1\\,kHz\n",
        "$$\n",
        "\n",
        "$$\n",
        "Q = 10\n",
        "$$\n",
        "\n",
        "The circuit design is done in **Xschem** and the simulation in **ngspice**. For the design on transistor level the 130nm CMOS technology **SG13G2** is used. All these tools and PDk are integrated into a docker image **IIC-OSIC-TOOLS** [@pretl_git2025] provided by Prof. Dr. Harald Pretl from Johannes Keplar University. \n",
        "\n",
        "This documentation provides a development report, which documents the design process with the taken steps and decisions made.\n",
        "\n",
        "\n",
        "# Theoretical Background\n",
        "\n",
        "my idea was to group all theoretics into one chapter, like a when the information becomes necessary during the quarto book, people can just jump back to this. we would circumvent having to introduce every little concept seperately whenever it comes up...\n",
        "\n",
        ":::{.callout-warning}\n",
        "I am thinking about changing the order, so that we are starting with biquads and work through the filter design from big to small...\n",
        ":::\n",
        "\n",
        "This chapter introduces the theory and core concepts necessary for IC design of a biquad filter. It is structured in a way, that it goes from the big picture to the small components. First, biquad filters are introduced with a focus on the universal biquad filter. After that, operational amplifiers come into the the foreground, as biquad filters make use of them in their circuits. Operational amplifiers are looked upon from an IC design standpoint.\n",
        "\n",
        "## Biquad filter\n",
        "\n",
        "The biquadratic filter, also known as the biquad filter, has its earliest implementation in the 1960s but is still in use today, most commonly in radio frequency receivers [@razavi2018]. In its application in RF-technology, it is used to remove unwanted neighboring signals ans noise [@razavi2024]. As biquad filter are second-order filters, they are also used as building blocks for higher filter implementations, by cascading them [@aslkpro2012].\n",
        "\n",
        "### Universal biquad filter\n",
        "\n",
        "For the filter design in this project, an universal biquad filter is used. The universal biquad filter is biquad filter variant with four operational amplifiers used in its design and the property of being able to be used in four different filter variants. Depending on the output of the universal biquad used, a low pass filter, high pass filter, band pass filter, or band stop filter will be implemented. This can be seen in (ref to figure of biquad fitler design). [@aslkpro2012]\n",
        "\n",
        ":::{.callout-warning}\n",
        "insert figure of biquad circuit HERE!\n",
        ":::\n",
        "\n",
        "![circuit design of an universal biquad filter](/images/sec_theorectical_background/biquad_circuit.pdf){#fig-BiquadCircuit width=100%}\n",
        "\n",
        "The universal biquad filter consists of two non-inverting amplifiers working as adders in the circuit and two integrators. By setting $R$ and $C$ to specific values, the resonance frequency can be chosen. Other parameters adjustable in the universal biquad filter are the quality factor $Q$ and the low-frequency gain $H_0$. The quality factor and low-frequency gain determine the frequency response peaks of the low pass filter and the band pass filter. [@aslkpro2012]\n",
        "\n",
        "#### Characteristics\n",
        "\n",
        "characteristics of design, implementation etc. lets see what we can find\n",
        "\n",
        "do we  need behauviour here too?\n",
        "\n",
        "If the dc-amplification is set to $H_0 = 1$, only the quality factor $Q$ controls the position of the poles and the peaking in the frequency response. \n",
        "\n",
        "#### Stability\n",
        "\n",
        "stability of biquad as a whole\n",
        "\n",
        ":::{.callout-warning}\n",
        "maybe better to movve this to characteristics section... else there will be repeats or the other section will be very short\n",
        ":::\n",
        "\n",
        "##### Pole-Zero diagram\n",
        "\n",
        "##### Component stability\n",
        "\n",
        "\n",
        "\n",
        "## Operational Amplifier\n",
        "\n",
        "i think this is kinda where our focus is again, so like a good theory is necessary\n",
        "\n",
        "### Current Mirror\n",
        "\n",
        "we talked a lot about the stages during the lectures, so i thought good idea to introduce them seperatly \n",
        "\n",
        "### Differential Stage\n",
        "\n",
        "both of them (and then maybe? slot them together, could be ddone in varients???)\n",
        "\n",
        "### Variants ?\n",
        "\n",
        "maybe like miller opamp or something like that\n",
        "\n",
        "### Small-Signal Representation\n",
        "\n",
        "thought i would be a good idea to at least have this somewhere\n",
        "\n",
        "### Stability\n",
        "\n",
        "stability of op amp on its own\n",
        "\n",
        "### Sizing\n",
        "\n",
        "dont know if it makes sense here, i think at some theoretics should be written about sizing, but open to discuss placement\n",
        "\n",
        "\n",
        "\n",
        "# Characterisation\n",
        "\n",
        "this chap is more about our biquad, and how we made it the way it is now\n",
        "\n",
        "i am failry open to discuss the exact contents of this chapter, as it is the one i am the most unsure about\n",
        "\n",
        "we also need to excatly decide on where this chapter ends, as Finn will continue with chap 5 and the break between the chapters shall be as smooth as possible\n",
        "\n",
        ":::{.callout-warning}\n",
        "decide on the chapter intro when it is clear where the cut is between this chapter and the next\n",
        ":::\n",
        "\n",
        "## Behauvioural Analysis and macro modelling\n",
        "\n",
        "The behauvioural analysis is done through macro modelling the universal biquad filter as a system. The system can be described with transfer functions and modelled with python.\n",
        "\n",
        "### Transfer Functions and frequency response\n",
        "\n",
        ":::{.callout-warning}\n",
        "This whole section needs to be reworked, I am not happy with the reading flow right now! -AvA\n",
        ":::\n",
        "\n",
        "The ASLK PRO Manual [@aslkpro2012] provides the transfer functions of the four filter outputs: low pass, high pass, band pass, and band stop. The transfer functions are adaptations of the general second order transfer function [@razavi2018]:\n",
        "\n",
        "$$\n",
        "H(s) = \\frac{a_1 s^2 + b_1 s + c_1}{a_2 s^2 + b_2 s + c_2}\n",
        "$$ {#eq-TFSecondOrder}\n",
        "\n",
        "The coeffcients can be choosen so, that different responses, like low pass, high pass, band pass, and band stop are achieved.\n",
        "\n",
        "In filter design a variant of this generalized transfer function is often choosen because it is easier describe the system by quality factor and angular frequency [@razavi2018].\n",
        "\n",
        "$$\n",
        "H(s) = \\frac{\\omega_n^2}{s^2 + \\frac{\\omega_n}{Q} s + \\omega_n^2}\n",
        "$$ {#eq-TFSecondOrderBiquad}\n",
        "\n",
        "In the following transfer function the input and output voltage are referenced according to @fig-BiquadCircuit. The sections only contain their specific transfer function and frequency response.\n",
        "\n",
        ":::{.callout-warning}\n",
        "insert ref to universal biquad circuit\n",
        ":::\n",
        "\n",
        ":::{.callout-warning}\n",
        "please recheck ALL TFs against manaul for corecctness\n",
        ":::\n",
        "\n",
        "#### Low pass\n",
        "\n",
        "The output if the low pass filter is marked in the circuit (@fig-BiquadCircuit) as $LPF$ and corresponds to $V_{03}$ in the transfer function @eq-TFLowpass.\n",
        "\n",
        "$$\n",
        "\\frac{V_{03}}{V_i} = \\frac{H_0}{\\left( 1 + \\frac{s}{\\omega_0 Q} + \\frac{s^2}{\\omega_0^2} \\right)}\n",
        "$$ {#eq-TFLowpass}\n",
        "\n",
        "@fig-freqResponseLowpass shows the amplitude and phase response of the low pass filter. The required frequency $f_0 = 1\\,kHz$ and quality factor $Q = 10$ recognizable in the bode plot. As the dc-gain was chosen to be $H_0 = 1$, the low pass filter has a amplitude amplification of 1 in the lower frequencies.\n"
      ],
      "id": "e5a04bfa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-freqResponseLowpass\n",
        "#| fig-cap: Frequency response of the low pass filter\n",
        "#| code-fold: true\n",
        "\n",
        "# Behavioral Analysis Biquad Filter\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Initial values\n",
        "f0 = 1e3  # Resonance frequency in Hz\n",
        "w0 = 2 * np.pi * f0  # Angular frequency in rad/s\n",
        "Q = 10  # Quality factor\n",
        "H0 = 1  # Play around with this later\n",
        "\n",
        "# Logarithmic frequency axis\n",
        "frequencies = np.logspace(2, 4, 10000)  # Frequency from 10^2 to 10^4 Hz\n",
        "s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jω\n",
        "\n",
        "############################################\n",
        "# Transfer functions of Active Filters\n",
        "############################################\n",
        "\n",
        "### Numerator\n",
        "# Low Pass Filter\n",
        "b_lp = H0\n",
        "\n",
        "# High Pass Filter\n",
        "b_hp = (H0 * (s**2 / w0**2))\n",
        "\n",
        "# Band Pass Filter\n",
        "b_bp = (-H0 * (s / w0))\n",
        "\n",
        "# Band Stop Filter\n",
        "b_bs = -((1 + (s**2 / (w0**2))) * H0)\n",
        "\n",
        "# Denominator -> for all filters the same\n",
        "a0 = 1\n",
        "a1 = (s / (w0 * Q))\n",
        "a2 = (s**2 / (w0**2))\n",
        "\n",
        "den = a0 + a1 + a2\n",
        "\n",
        "############################################\n",
        "# Calculation of the transfer functions H(s)\n",
        "############################################\n",
        "Hs_lp = b_lp / den\n",
        "Hs_hp = b_hp / den\n",
        "Hs_bp = b_bp / den\n",
        "Hs_bs = b_bs / den\n",
        "\n",
        "# Bode Diagram\n",
        "fig, axs = plt.subplots(2)\n",
        "#fig.suptitle(\"frequency response of biquad filter\")\n",
        "\n",
        "# Low Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp)), label='low pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp)) * (180 / np.pi), label='low pass')\n",
        "'''\n",
        "# High Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_hp)), label='high pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_hp)) * (180 / np.pi), label='high pass')\n",
        "\n",
        "# Band Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bp)), label='band pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_bp)) * (180 / np.pi), label='band pass')\n",
        "\n",
        "# Band Stop Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bs)), label='band stop')\n",
        "axs[1].semilogx(frequencies, (np.angle(Hs_bs)) * (180 / np.pi), label='band stop')\n",
        "'''\n",
        "#axs[0].title(\"amplitude response\")\n",
        "axs[0].set_xlabel(\"frequency/Hz\")\n",
        "axs[0].set_ylabel(\"amplitude/dB\")\n",
        "axs[0].set_ylim(-50, 25)\n",
        "axs[0].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[0].legend(loc=1)\n",
        "\n",
        "#axs[1].title(\"phase response\")\n",
        "axs[1].set_xlabel(\"frequency/Hz\")\n",
        "axs[1].set_ylabel(\"phase/deg\")\n",
        "axs[1].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[1].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-freqResponseLowpass",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### High pass\n",
        "\n",
        "The output if the high pass filter is marked in the circuit (@fig-BiquadCircuit) as $HPF$ and corresponds to $V_{01}$ in the transfer function @eq-TFHighpass.\n",
        "\n",
        "$$\n",
        "\\frac{V_{01}}{V_i} = \\frac{\\left( H_0 \\cdot \\frac{s^2}{\\omega_0^2} \\right)}{\\left( 1 + \\frac{s}{\\omega_0 Q} + \\frac{s^2}{\\omega_0^2} \\right)} \n",
        "$$ {#eq-TFHighpass}\n",
        "\n",
        "@fig-freqResponseLowpass shows the amplitude and phase response of the high pass filter. The required frequency $f_0 = 1\\,kHz$ and quality factor $Q = 10$ recognizable in the bode plot. As the dc-gain was chosen to be $H_0 = 1$, the low pass filter has a amplitude amplification of 1 in the higher frequencies.\n"
      ],
      "id": "6e5e6c58"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-freqResponseHighpass\n",
        "#| fig-cap: Frequency response of the high pass filter\n",
        "#| code-fold: true\n",
        "\n",
        "# Behavioral Analysis Biquad Filter\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Initial values\n",
        "f0 = 1e3  # Resonance frequency in Hz\n",
        "w0 = 2 * np.pi * f0  # Angular frequency in rad/s\n",
        "Q = 10  # Quality factor\n",
        "H0 = 1  # Play around with this later\n",
        "\n",
        "# Logarithmic frequency axis\n",
        "frequencies = np.logspace(2, 4, 10000)  # Frequency from 10^2 to 10^4 Hz\n",
        "s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jω\n",
        "\n",
        "############################################\n",
        "# Transfer functions of Active Filters\n",
        "############################################\n",
        "\n",
        "### Numerator\n",
        "# Low Pass Filter\n",
        "b_lp = H0\n",
        "\n",
        "# High Pass Filter\n",
        "b_hp = (H0 * (s**2 / w0**2))\n",
        "\n",
        "# Band Pass Filter\n",
        "b_bp = (-H0 * (s / w0))\n",
        "\n",
        "# Band Stop Filter\n",
        "b_bs = -((1 + (s**2 / (w0**2))) * H0)\n",
        "\n",
        "# Denominator -> for all filters the same\n",
        "a0 = 1\n",
        "a1 = (s / (w0 * Q))\n",
        "a2 = (s**2 / (w0**2))\n",
        "\n",
        "den = a0 + a1 + a2\n",
        "\n",
        "############################################\n",
        "# Calculation of the transfer functions H(s)\n",
        "############################################\n",
        "Hs_lp = b_lp / den\n",
        "Hs_hp = b_hp / den\n",
        "Hs_bp = b_bp / den\n",
        "Hs_bs = b_bs / den\n",
        "\n",
        "# Bode Diagram\n",
        "fig, axs = plt.subplots(2)\n",
        "#fig.suptitle(\"frequency response of biquad filter\")\n",
        "\n",
        "# Low Pass Filter\n",
        "#axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp)), label='low pass')\n",
        "#axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp)) * (180 / np.pi), label='low pass')\n",
        "\n",
        "# High Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_hp)), label='high pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_hp)) * (180 / np.pi), label='high pass')\n",
        "'''\n",
        "# Band Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bp)), label='band pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_bp)) * (180 / np.pi), label='band pass')\n",
        "\n",
        "# Band Stop Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bs)), label='band stop')\n",
        "axs[1].semilogx(frequencies, (np.angle(Hs_bs)) * (180 / np.pi), label='band stop')\n",
        "'''\n",
        "#axs[0].title(\"amplitude response\")\n",
        "axs[0].set_xlabel(\"frequency/Hz\")\n",
        "axs[0].set_ylabel(\"amplitude/dB\")\n",
        "axs[0].set_ylim(-50, 25)\n",
        "axs[0].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[0].legend(loc=1)\n",
        "\n",
        "#axs[1].title(\"phase response\")\n",
        "axs[1].set_xlabel(\"frequency/Hz\")\n",
        "axs[1].set_ylabel(\"phase/deg\")\n",
        "axs[1].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[1].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-freqResponseHighpass",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Band pass\n",
        "\n",
        "The output for the band pass filter is marked as $BPF$ in @fig-BiquadCircuit. This denotes the point that is referenced in @eg-TFBandpass as $V_{02}$.\n",
        "\n",
        "$$\n",
        "\\frac{V_{02}}{V_i} = \\frac{\\left( - H_0 \\cdot \\frac{s}{\\omega_0} \\right)}{\\left( 1 + \\frac{s}{\\omega_0 Q} + \\frac{s^2}{\\omega_0^2} \\right)}\n",
        "$$ {#eq-TFBandpass}\n",
        "\n",
        "The band pass shown in @fig-freqResponseBandpass has its center frequency at $1\\,kHz$ as set in the requirements. Similarly to the low pass filter in @fig-freqResponseLowpass and the high pass filter in @fig-freqResponseHighpass the amplitude response peaks at this frequency, with its peak influenced by the quality factor.\n"
      ],
      "id": "5ab0b5b6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-freqResponseBandpass\n",
        "#| fig-cap: Frequency response of the band pass filter\n",
        "#| code-fold: true\n",
        "\n",
        "# Behavioral Analysis Biquad Filter\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Initial values\n",
        "f0 = 1e3  # Resonance frequency in Hz\n",
        "w0 = 2 * np.pi * f0  # Angular frequency in rad/s\n",
        "Q = 10  # Quality factor\n",
        "H0 = 1  # Play around with this later\n",
        "\n",
        "# Logarithmic frequency axis\n",
        "frequencies = np.logspace(2, 4, 10000)  # Frequency from 10^2 to 10^4 Hz\n",
        "s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jω\n",
        "\n",
        "############################################\n",
        "# Transfer functions of Active Filters\n",
        "############################################\n",
        "\n",
        "### Numerator\n",
        "# Low Pass Filter\n",
        "b_lp = H0\n",
        "\n",
        "# High Pass Filter\n",
        "b_hp = (H0 * (s**2 / w0**2))\n",
        "\n",
        "# Band Pass Filter\n",
        "b_bp = (-H0 * (s / w0))\n",
        "\n",
        "# Band Stop Filter\n",
        "b_bs = -((1 + (s**2 / (w0**2))) * H0)\n",
        "\n",
        "# Denominator -> for all filters the same\n",
        "a0 = 1\n",
        "a1 = (s / (w0 * Q))\n",
        "a2 = (s**2 / (w0**2))\n",
        "\n",
        "den = a0 + a1 + a2\n",
        "\n",
        "############################################\n",
        "# Calculation of the transfer functions H(s)\n",
        "############################################\n",
        "Hs_lp = b_lp / den\n",
        "Hs_hp = b_hp / den\n",
        "Hs_bp = b_bp / den\n",
        "Hs_bs = b_bs / den\n",
        "\n",
        "# Bode Diagram\n",
        "fig, axs = plt.subplots(2)\n",
        "#fig.suptitle(\"frequency response of biquad filter\")\n",
        "'''\n",
        "# Low Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp)), label='low pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp)) * (180 / np.pi), label='low pass')\n",
        "\n",
        "# High Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_hp)), label='high pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_hp)) * (180 / np.pi), label='high pass')\n",
        "'''\n",
        "# Band Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bp)), label='band pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_bp)) * (180 / np.pi), label='band pass')\n",
        "\n",
        "# Band Stop Filter\n",
        "#axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bs)), label='band stop')\n",
        "#axs[1].semilogx(frequencies, (np.angle(Hs_bs)) * (180 / np.pi), label='band stop')\n",
        "\n",
        "#axs[0].title(\"amplitude response\")\n",
        "axs[0].set_xlabel(\"frequency/Hz\")\n",
        "axs[0].set_ylabel(\"amplitude/dB\")\n",
        "axs[0].set_ylim(-50, 25)\n",
        "axs[0].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[0].legend(loc=1)\n",
        "\n",
        "#axs[1].title(\"phase response\")\n",
        "axs[1].set_xlabel(\"frequency/Hz\")\n",
        "axs[1].set_ylabel(\"phase/deg\")\n",
        "axs[1].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[1].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-freqResponseBandpass",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Band stop\n",
        "\n",
        "The output for the band stop filter is marked in @fig-BiquadCircuit as $BSF$ and in the transfer function as $V_{04}$.\n",
        "\n",
        "$$\n",
        "\\frac{V_{04}}{V_i} = \\frac{\\left( 1 + \\frac{s^2}{\\omega_0^2} \\right) \\cdot H_0}{\\left( 1 + \\frac{s}{\\omega_0 Q} + \\frac{s^2}{\\omega_0^2} \\right)}\n",
        "$$ {#eq-TFBandstopFalse}\n",
        "\n",
        "[@renner2025] argues that @eq-TFBandstopFalse from the ASLK PRO Manual [@aslkpro2012] is incorrect, as using that equation produces inconsistent results. Using the negated form of @eq-TFBandstopFalse as seen in @eq-TFBandstopCorrect seems to produce the correct output. Therefore @eq-TFBandstopCorrect will be used for further analysis.\n",
        "\n",
        "$$\n",
        "\\frac{V_{04}}{V_i} = - \\frac{\\left( 1 + \\frac{s^2}{\\omega_0^2} \\right) \\cdot H_0}{\\left( 1 + \\frac{s}{\\omega_0 Q} + \\frac{s^2}{\\omega_0^2} \\right)}\n",
        "$$ {#eq-TFBandstopCorrect}\n",
        "\n",
        "@fig-freqResponseBandstop shows the frequency response of the band stop, with its center frequency at $1\\,kHz$.\n"
      ],
      "id": "14408f6a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-freqResponseBandstop\n",
        "#| fig-cap: Frequency response of the band stop filter\n",
        "#| code-fold: true\n",
        "\n",
        "# Behavioral Analysis Biquad Filter\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Initial values\n",
        "f0 = 1e3  # Resonance frequency in Hz\n",
        "w0 = 2 * np.pi * f0  # Angular frequency in rad/s\n",
        "Q = 10  # Quality factor\n",
        "H0 = 1  # Play around with this later\n",
        "\n",
        "# Logarithmic frequency axis\n",
        "frequencies = np.logspace(2, 4, 10000)  # Frequency from 10^2 to 10^4 Hz\n",
        "s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jω\n",
        "\n",
        "############################################\n",
        "# Transfer functions of Active Filters\n",
        "############################################\n",
        "\n",
        "### Numerator\n",
        "# Low Pass Filter\n",
        "b_lp = H0\n",
        "\n",
        "# High Pass Filter\n",
        "b_hp = (H0 * (s**2 / w0**2))\n",
        "\n",
        "# Band Pass Filter\n",
        "b_bp = (-H0 * (s / w0))\n",
        "\n",
        "# Band Stop Filter\n",
        "b_bs = -((1 + (s**2 / (w0**2))) * H0)\n",
        "\n",
        "# Denominator -> for all filters the same\n",
        "a0 = 1\n",
        "a1 = (s / (w0 * Q))\n",
        "a2 = (s**2 / (w0**2))\n",
        "\n",
        "den = a0 + a1 + a2\n",
        "\n",
        "############################################\n",
        "# Calculation of the transfer functions H(s)\n",
        "############################################\n",
        "Hs_lp = b_lp / den\n",
        "Hs_hp = b_hp / den\n",
        "Hs_bp = b_bp / den\n",
        "Hs_bs = b_bs / den\n",
        "\n",
        "# Bode Diagram\n",
        "fig, axs = plt.subplots(2)\n",
        "#fig.suptitle(\"frequency response of biquad filter\")\n",
        "'''\n",
        "# Low Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp)), label='low pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp)) * (180 / np.pi), label='low pass')\n",
        "\n",
        "# High Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_hp)), label='high pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_hp)) * (180 / np.pi), label='high pass')\n",
        "\n",
        "# Band Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bp)), label='band pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_bp)) * (180 / np.pi), label='band pass')\n",
        "'''\n",
        "# Band Stop Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bs)), label='band stop')\n",
        "axs[1].semilogx(frequencies, (np.angle(Hs_bs)) * (180 / np.pi), label='band stop')\n",
        "\n",
        "#axs[0].title(\"amplitude response\")\n",
        "axs[0].set_xlabel(\"frequency/Hz\")\n",
        "axs[0].set_ylabel(\"amplitude/dB\")\n",
        "axs[0].set_ylim(-50, 25)\n",
        "axs[0].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[0].legend(loc=1)\n",
        "\n",
        "#axs[1].title(\"phase response\")\n",
        "axs[1].set_xlabel(\"frequency/Hz\")\n",
        "axs[1].set_ylabel(\"phase/deg\")\n",
        "axs[1].grid(True, which=\"both\", ls=\"--\")\n",
        "#axs[1].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-freqResponseBandstop",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Comparison\n",
        "\n",
        "some text...\n"
      ],
      "id": "b5c63a1a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-freqResponseFilter\n",
        "#| fig-cap: Behauvioural analysis of biquad filter\n",
        "#| code-fold: true\n",
        "\n",
        "# Behavioral Analysis Biquad Filter\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Initial values\n",
        "f0 = 1e3  # Resonance frequency in Hz\n",
        "w0 = 2 * np.pi * f0  # Angular frequency in rad/s\n",
        "Q = 10  # Quality factor\n",
        "H0 = 1  # Play around with this later\n",
        "\n",
        "# Logarithmic frequency axis\n",
        "frequencies = np.logspace(2, 4, 10000)  # Frequency from 10^2 to 10^4 Hz\n",
        "s = 1j * 2 * np.pi * frequencies  # Laplace-Variable s = jω\n",
        "\n",
        "############################################\n",
        "# Transfer functions of Active Filters\n",
        "############################################\n",
        "\n",
        "### Numerator\n",
        "# Low Pass Filter\n",
        "b_lp = H0\n",
        "\n",
        "# High Pass Filter\n",
        "b_hp = (H0 * (s**2 / w0**2))\n",
        "\n",
        "# Band Pass Filter\n",
        "b_bp = (-H0 * (s / w0))\n",
        "\n",
        "# Band Stop Filter\n",
        "b_bs = -((1 + (s**2 / (w0**2))) * H0)\n",
        "\n",
        "# Denominator -> for all filters the same\n",
        "a0 = 1\n",
        "a1 = (s / (w0 * Q))\n",
        "a2 = (s**2 / (w0**2))\n",
        "\n",
        "den = a0 + a1 + a2\n",
        "\n",
        "############################################\n",
        "# Calculation of the transfer functions H(s)\n",
        "############################################\n",
        "Hs_lp = b_lp / den\n",
        "Hs_hp = b_hp / den\n",
        "Hs_bp = b_bp / den\n",
        "Hs_bs = b_bs / den\n",
        "\n",
        "# Bode Diagram\n",
        "fig, axs = plt.subplots(2)\n",
        "#fig.suptitle(\"frequency response of biquad filter\")\n",
        "\n",
        "# Low Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_lp)), label='low pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_lp)) * (180 / np.pi), label='low pass')\n",
        "\n",
        "# High Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_hp)), label='high pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_hp)) * (180 / np.pi), label='high pass')\n",
        "\n",
        "# Band Pass Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bp)), label='band pass')\n",
        "axs[1].semilogx(frequencies, np.unwrap(np.angle(Hs_bp)) * (180 / np.pi), label='band pass')\n",
        "\n",
        "# Band Stop Filter\n",
        "axs[0].semilogx(frequencies, 20 * np.log10(np.abs(Hs_bs)), label='band stop')\n",
        "axs[1].semilogx(frequencies, (np.angle(Hs_bs)) * (180 / np.pi), label='band stop')\n",
        "\n",
        "#axs[0].title(\"amplitude response\")\n",
        "axs[0].set_xlabel(\"frequency/Hz\")\n",
        "axs[0].set_ylabel(\"amplitude/dB\")\n",
        "axs[0].set_ylim(-50, 25)\n",
        "axs[0].grid(True, which=\"both\", ls=\"--\")\n",
        "axs[0].legend(loc=1)\n",
        "\n",
        "#axs[1].title(\"phase response\")\n",
        "axs[1].set_xlabel(\"frequency/Hz\")\n",
        "axs[1].set_ylabel(\"phase/deg\")\n",
        "axs[1].grid(True, which=\"both\", ls=\"--\")\n",
        "axs[1].legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "fig-freqResponseFilter",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Stability\n",
        "\n",
        "The stability of the biquad is checked at different hierarchical levels. The first analysis considers the system from a theorectical standpoint with transfer functions, and checks if conceptual design of the biquad filter is stable. On a component level the stability of the integrators and adders is analyzed, to verify that the chosen values for resistors and capcitors do not induce oscillations through the feedback loop. \n",
        "\n",
        "(At last, the general stability of the OTA circuit itself needs to be checked, so that) <- lets see what we can find for this...\n",
        "\n",
        "#### System stability\n",
        "A system is stable if its impulse response is absolutley integrateable. In case of a given transfer function, this can also be checked by calculating the poles of the transfer function. If all the poles lay in the left half of the s-plane, the system is considered stable. There is a special case where single poles can lay on the $j\\omega$-axis, on their own or in combination with poles in the left half of the s-plane. Systems which fall under that, are called marginally stable. [@fliege1991]\n",
        "\n",
        "#### Pole-zero plot\n"
      ],
      "id": "179506fa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-poleZeroStability\n",
        "#| fig-cap: Pole-zero plot for all transfer functions\n",
        "#| code-fold: true\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.signal import tf2zpk\n",
        "\n",
        "# Given values\n",
        "f = 1e3\n",
        "w = 2 * np.pi * f\n",
        "R = 1e3\n",
        "C = 1 / (w * R)\n",
        "Q = 10\n",
        "H0 = 1\n",
        "\n",
        "# Calculate w0\n",
        "w0 = 1 / (R * C)\n",
        "\n",
        "# Transfer function coefficients\n",
        "a2 = 1 / w0**2\n",
        "a1 = 1 / (w0 * Q)\n",
        "a0 = 1\n",
        "\n",
        "# Define transfer functions manually as (numerator, denominator) pairs\n",
        "systems = {\n",
        "    'Lowpass Filter': ([H0], [a2, a1, a0]),\n",
        "    'Highpass Filter': ([H0 / w0**2, 0, 0], [a2, a1, a0]),\n",
        "    'Bandpass Filter': ([-H0 / w0, 0], [a2, a1, a0]),\n",
        "    'Bandstop Filter': ([H0 / w0**2, 0, H0], [a2, a1, a0])\n",
        "}\n",
        "\n",
        "# Function to plot pole-zero map\n",
        "def plot_pzmap(num, den, title, subplot_pos):\n",
        "    zeros, poles, _ = tf2zpk(num, den)\n",
        "    plt.subplot(2, 2, subplot_pos)\n",
        "    plt.plot(np.real(zeros), np.imag(zeros), 'go', label='Zeros')\n",
        "    plt.plot(np.real(poles), np.imag(poles), 'rx', label='Poles')\n",
        "    plt.axhline(0, color='gray', lw=0.5)\n",
        "    plt.axvline(0, color='gray', lw=0.5)\n",
        "    plt.title(title)\n",
        "    plt.xlim([-1500, 1500])\n",
        "    plt.ylim([-10000, 10000])\n",
        "    plt.grid(True)\n",
        "    plt.legend(loc='upper right')\n",
        "\n",
        "# Plot all systems\n",
        "plt.figure(figsize=(12, 10))\n",
        "for i, (title, (num, den)) in enumerate(systems.items(), 1):\n",
        "    plot_pzmap(num, den, title, i)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "id": "fig-poleZeroStability",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "@fig-poleZeroStability shows the pole-zero plots of all four filters, low pass, high pass, band pass and band stop. In all four plots the poles are located in the left half of the s-plane and the system can therefore theoretically be classified as stable. [@razavi2018] confirms this, as the article explains that with $Q \\rightarrow \\infty$ the poles of the system approach the $j\\omega$ axis and the system becomes unstable.\n",
        "\n",
        "This analysis onbly considers the system as a mathematical model and as a whole. Further considerations regarding the stability of the components, integrators and adders, and the stability of the operational amplifiers themselves, have to be done.\n",
        "\n",
        "#### Component stability\n",
        "\n",
        "Circuits with opamps often have feedback loops, meaning that the output of the operational amplifier is somehow connected to the inverted input of the opamp. These feedback loops become problematic when the feedback signal is in phase with the input signal, as positive feedback is created and the circuit is working as an oscillator. [@reisch2007]\n",
        "\n",
        "The stability of the non-inverting amplifier can be verified by calculating the phase reserve $\\alpha$ of the circuit. If $f_k$ is the frequency where the feedback gain is equal to 1 and $\\varphi_k$ is the corresponding phase to that frequency, then \n",
        "the phase reserve is calculated by:\n",
        "\n",
        "$$\n",
        "\\alpha = 180°\n",
        "$$\n",
        "\n",
        "For circuits to be considered stable, the phase reserve has to be positive. To reduce overshoots during the transient response, it is customary to have a phase reserve of $\\alpha > 45°$. [@reisch2007]\n",
        "\n",
        ":::{.callout-warning}\n",
        "insert figure from reisch page 244\n",
        ":::\n",
        "\n",
        "![Example of a transcient response of a circuit with a phase reserve of $\\alpha = 5.7°$](/images/sec_characterisation/reisch_example_stability_tran.png){#fig-reischExampleStabilityTransient}\n",
        "\n",
        "Figure (reisch) shows the transient response of a circuit with a phase reserve of $\\alpha = 5.7°. The overshoots are clearly visible and number of the overshoots per puls are larger then the customary \"one over, one under\"-rule. As the phase reserve is positive, the figure shows that even though the transient response is not ideal, the oscillations are attenuated and the circuit is can be considered as stable.\n",
        "\n",
        "In practical application, the phase reserve can be graphically determined with the help of bode diagrams. The bode diagram of the circuit with an open feedback loop is simulated, so that the frequency $f_k$ can be read out. This is the frequnecy where the feedback gain is 1 or 0 dB. The corresponding frequency to that, is the phase of the feedback gain $\\varphi_k$, the difference between $-180°$ and $\\varphi_k$ is the phase reserve $\\alpha$. [@reisch2007]\n",
        "\n",
        ":::{.callout-warning}\n",
        "insert circuit where the stability analsis was done from, like in ltspice\n",
        ":::\n",
        "\n",
        ":::{.callout-warning}\n",
        "insert bode diagram figures (both: integrator and adder)\n",
        ":::\n",
        "\n",
        "In the following figures (ref) and (ref) this method was used to determine the stability over the phase reserve.\n",
        "(add here part about whether they are stable...)\n",
        "\n",
        "#### OTA stability\n",
        "\n",
        "i have not found anything in pretl script, but i clearly remember mr. meiners talking about this...\n",
        "\n",
        "### Ideal Opamp\n",
        "\n",
        "kinda forgot where I wanted to go with this one... ehhh maybe it will come back\n",
        "\n",
        "uhhh i think it was about the ideal circuit and spice analysis etc\n",
        "\n",
        "To check the behauviour of the implemented circuit against the modelled behauviour of the transfer function, the universal biquad was built as an ideal circuit with voltage-regulated current sources instead of OTAs.\n",
        "\n",
        "## Implementation (or Real Circuit)\n",
        "\n",
        "this is about the transition from the ideal circuit to real circuit\n",
        "\n",
        "### used opamp representation\n",
        "\n",
        "like with opamp did we use specifically (5 ota i think), why, what are special about that\n",
        "\n",
        "### Sizing\n",
        "\n",
        "with the script from pretl, if i remember correctly\n",
        "\n",
        "\n",
        "# Filter Design\n",
        "\n",
        "hello\n",
        "\n",
        "\n",
        "![HSBBBB](images/hsb-logo.png){#fig-hsblogo}\n",
        "\n",
        "TEST   GIT\n",
        "\n",
        "be free finn!\n",
        "\n",
        "\n",
        "# Discussion\n",
        "\n",
        "the critical thinkting place \n",
        "\n",
        "## Stability Analysis\n",
        "\n",
        "## Comparison\n",
        "\n",
        "like between python, ideal, real, etc\n",
        "\n",
        "## is filter good?\n",
        "\n",
        "review and evaluate\n",
        "\n",
        "\n",
        "# Conclusion\n",
        "\n",
        "bla bla reflection\n",
        "\n",
        "## Outlook\n",
        "\n",
        "what else could be done 'n stuff\n",
        "\n",
        "\n",
        "# Bibliography {.unnumbered}\n",
        "\n",
        "::: {#refs}\n",
        ":::\n"
      ],
      "id": "27a51b05"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/atakan/quarto-env/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}